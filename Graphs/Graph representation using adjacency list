#include<bits/stdc++.h>
using namespace std;

//function to add an edge in an undirected graph
void addEdge(vector<int>adj[],int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

//function to print adjacency list representation of a graph
void printGraph(vector<int>adj,int V)//V is total number of nodes
{
for(int v=0;v<V;v++)
{
    cout<<"adjacency list of vertex"<<v<<endl;
    cout<<"head";
    for(auto x:adj[v])
    {
        cout<<"->"<<x;
    }
    cout<<endl;
}

}

int main()
{
    int V = 5;
    vector<int> adj[V];
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 4);
    addEdge(adj, 1, 2);
    addEdge(adj, 1, 3);
    addEdge(adj, 1, 4);
    addEdge(adj, 2, 3);
    addEdge(adj, 3, 4);
    printGraph(adj, V);
    return 0;
}

/*Pros: Saves space O(|V|+|E|) . In the worst case, there can be C(V, 2) number of edges in a graph thus consuming O(V^2) space. Adding a vertex is easier.
Cons: Queries like whether there is an edge from vertex u to vertex v are not efficient and can be done O(V).*/
