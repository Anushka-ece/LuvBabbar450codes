class Solution
{
    public:
    struct node *reverse (struct node *head, int k)
    { 
        node* nextptr;
        node* currptr=head;
        node* prevptr=NULL;
        int count=0;
        while(currptr!=NULL && count<k)
        {
            nextptr=currptr->next;
            currptr->next=prevptr;
            prevptr=currptr;
            currptr=nextptr;
            count++;
        }
        //to check if we can still reverse
        if(nextptr!=NULL)
        {
            head->next=reverse(nextptr,k);
        }
        return prevptr;
    }
};

Time Complexity: O(n). 
Traversal of list is done only once and it has 'n' elements.
Auxiliary Space: O(n/k). 
For each Linked List of size n, n/k or (n/k)+1 calls will be made during the recursion.
